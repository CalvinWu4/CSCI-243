Homework 4, Activity 1:  Learning to use Valgrind

Name: Calvin Wu

Instructions
------------

These questions deal with the song program found in song.c, mtime.c and
songtest.c.  Compile these files as indicated in the assignment writeup.

We have included a compiled copy of the solution "goodsongtest" for you
to run to see how the program should behave.

The nature of these activities will have you switching back and forth
between running valgrind and looking at code. You may find it helpful to
have a second shell window open; run valgrind in the first window, and 
execute other commands (such as 'more', or an editor) in the second window.

Questions
---------

1. Run "songtest" using the valgrind command:
      valgrind --leak-check=full songtest
   Look at the summary information at the end of the valgrind output.

   a. How many bytes of memory are reported lost?

******************** Your answer below (3 points) ********************
436

***********************************************************

   b. How many bytes of memory are still in use when the program exited?

******************** Your answer below (3 points) ********************
436
***********************************************************

   c. How many allocation and deallocation calls were made?

******************** Your answer below (4 points) ********************
60 allocs
50 frees
***********************************************************

2. The output from valgrind indicates many different errors, but most
   are caused by the same statements in the program being executed
   again and again.

   a. List all the different types of errors reported by valgrind, and
      how many times each occurred.  Consider only messages printed
      before the summary of heap usage.

******************** Your answer below (3 points) ********************
Invalid write of size 1: 4 times
Invalid read of size 1 26 times
Invalid free() / delete / delete[] / realloc(): 2 times 
***********************************************************

   b. At what lines in the source file are the memory blocks being
      allocated?

******************** Your answer below (2 points) ********************
songCopy (song.c:101,104)
main (songtest.c:82,82)

***********************************************************

   c. At what lines in the source file are the invalid read and write
      accesses to the memory blocks occurring?

******************** Your answer below (2 points) ********************
songCopy (song.c:101,102,104) 
main (songtest.c:82,91)
***********************************************************

   d. Based on this information, what is the source of the invalid read
      and write errors?

******************** Your answer below (3 points) ********************
Buffer overrun
***********************************************************

Given the knowledge gained from the previous question, correct these
errors and then recompile and retest the program.  The invalid memory
access errors should no longer occur.

3. Run valgrind again. Notice that after the program output valgrind
   reports two occurrences of "Invalid free()".

   a. In what function do these errors occur, and how many times is
      that function called from main()?

******************** Your answer below (4 points) ********************
These errors occur in songDelete and it is called 6 times from main().
***********************************************************

   b. How many times is free() called from inside that function itself
      (i.e., not from any other functions it calls)?

******************** Your answer below (3 points) ********************
Free() is called 2 times inside songDelete itself.
***********************************************************

   c. What fix is needed to eliminate the "Invalid free()" message?

******************** Your answer below (3 points) ********************
Remove free(artist) and free(title) before songDelete(song1) since that is songDelete's job 
and remove songDelete(song1) when song1 is already deleted.
***********************************************************

Make the fix you described, re-build and re-run the program.  The "Invalid
free" errors should no longer appear.

4. In the "HEAP SUMMARY" section, there are number of error reports
   regarding lost blocks of memory.

   a. In which functions were the calls to malloc() made which allocated
      the blocks that were lost, and what data items were they allocating
      space for?

******************** Your answer below (4 points) ********************
In songGetArtist, songGetTitle, newSong, songCopy, and songToString, calls to malloc() were made which allocated 
to the blocks that were lost. They were allocating space for the string, tmp, and the constant, song.
***********************************************************

   b. Examine the code to determine what you need to change to fix each
      of the problems. Explain your solution.

******************** Your answer below (2 points) ********************
In the main function, I used the freed each variable after it is used so that there is no lost memory. 
For example in line 86 of songtest.c: after sstr = songToString( song1 ); and the printf statement, I freed sstr.
***********************************************************

   c. The memory allocated by these functions is returned by them to
      the calling function; this effectively transfers the responsiblity
      for deallocating the memory to the caller as well.  Where is the
      most logical place for this memory to be deallocated?

******************** Your answer below (4 points) ********************
The most logical place to free memory is after its use is depleted. 
***********************************************************

Make the necessary changes to the code to correct these final errors.
At this point, if you did your work correctly, your program should run
to completion with no memory management errors detected by valgrind.
